<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>House of Black and White</title>
    <description>My blog</description>
    <link>http://blog.chriszimmerman.net</link>
    <atom:link href="http://blog.chriszimmerman.net/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Processes In Elixir</title>
        <description>&lt;h1 id=&quot;processes-in-elixir&quot;&gt;Processes In Elixir&lt;/h1&gt;

&lt;p&gt;Elixir makes use to the Erlang VM to create and manage many processes. Concurrency is easy and inexpensive in Elixir.&lt;/p&gt;

&lt;p&gt;You can make a new process in Elixir by using the spawn function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;spawn(module, :function_name, [optional_arguments])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The spawn function takes a module and a function from said module, as well as a list of optional arguments to pass to the function. Spawn returns a process identifier, or pid. A pid consists of three numbers which are used to identify a process. If you type &lt;code&gt;self&lt;/code&gt; into iex, you’ll find that iex itself runs as an elixir process.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;iex(1)&amp;gt; self
#PID&amp;lt;0.53.0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Processes need a way to communicate with each other in order to do anything meaningful. In Elixir, processes achieve this with messages. Processes send messages with data to other processes that receive those messages and handle the data accordingly. &lt;/p&gt;

&lt;p&gt;Here is a simple example:&lt;/p&gt;

&lt;p&gt;proctut.exs&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;defmodule ProcessMessage do
	def send_message msg do
		destination_pid = spawn(ProcessMessage, :get_message, [])
		IO.puts &quot;#{inspect(self)} here.&quot; 
		IO.puts &quot;Sending message to #{inspect(destination_pid)}&quot;
		send destination_pid, {self, msg}
	end	

	def get_message do
		receive do
			{sender, msg} -&amp;gt; 
				IO.puts &quot;#{inspect(self)} here.&quot;
				IO.puts &quot;Received a message from #{inspect(sender)}.&quot; 
				IO.puts &quot;It says \&quot;#{msg}\&quot;.&quot;
		end
	end
end

ProcessMessage.send_message &quot;Why hello there!&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The send_message function takes in a string which will get sent to a process it creates. The created process will run the get_message function, which just waits until it receives a message. It prints the pid of the process that sent the message as well as the message itself. It then terminates.&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Nov 2014 00:00:00 -0400</pubDate>
        <link>http://blog.chriszimmerman.net//2014/11/02/Elixir-Processes.html</link>
        <guid isPermaLink="true">http://blog.chriszimmerman.net//2014/11/02/Elixir-Processes.html</guid>
      </item>
    
      <item>
        <title>Semantic Versioning</title>
        <description>&lt;h1 id=&quot;semantic-versioning&quot;&gt;Semantic Versioning&lt;/h1&gt;

&lt;p&gt;At work, the topic of semantic versioning came up. I decided to do some research on the topic since I had not heard of the term before. &lt;/p&gt;

&lt;h2 id=&quot;what-is-semantic-versioning&quot;&gt;What is semantic versioning?&lt;/h2&gt;

&lt;p&gt;Semantic versioning is a convention for version-naming for your products, whether they be libraries, APIs, etc. Its purpose is to prevent difficulties in releasing new versions of your product. It may be difficult to release a new version of your product if you have to wait for new versions of your product’s dependencies to be released. You may also be reluctant to adopt new versions of packages or libraries since you might not know if a new version will break your existing code. &lt;/p&gt;

&lt;p&gt;In short:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Semantic versioning allows developers to easily reason about when it is and isn’t appropriate to adopt a new version of a dependency.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;format&quot;&gt;Format&lt;/h2&gt;

&lt;p&gt;For semantic versioning, your product must define a public API. The basic format for your API’s version should be as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;major.minor.patch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example, let’s say there is a library called Yarner, a string manipulation library. Its current version is 2.3.5. This means that the major version is 2, the minor version is 3, and the patch version is 5.&lt;/p&gt;

&lt;p&gt;The significance of the numbers is as follows:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-major - incremented when API-breaking changes are made.
		Minor and patch numbers are reset to zero.
-minor - incremented when non-API-breaking changes are made.
		Patch number is reset to zero.
-patch - incremented when non-API-breaking bug fixes are made.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;I have a library called AreaCalculator which has a public method, CalculateRectangleArea. It is currently version 1.2.0. It has the following signature: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CalculateRectangleArea(int length, int width).  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For whatever dumb reason, CalculateRectangleArea was calculating the area by multiplying length by itself:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return length * length;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was fixed and now the function correctly calculates the rectangle’s area by returning the rectangle’s length times width:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return length * width;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fixing this bug doesn’t break the interface of CalculateRectangleArea and it’s not a new feature, so the release containing this fix can be versioned as 1.2.1.&lt;/p&gt;

&lt;h2 id=&quot;another-example&quot;&gt;Another example&lt;/h2&gt;

&lt;p&gt;For my social website Stalk.me, I have provided an API v1.3.2 with which clients can find Users via the public FindPeopleNearby method. FindPeopleNearby takes a FindUserRequest object as its parameter. It has two fields, City and RangeInMiles.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//v1.3.2
public class FindUserRequest {
	public string City { get; set; }
	public int RangeInMiles { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;During development, I decided to utilize state in addition to city for location since towns with the same name can be in different states. I have added a new field, State, that clients can put on their request. This doesn’t break any functionality, so I can increase the minor version, which results in the patch version resetting to zero.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//v1.4.0
public class FindUserRequest {
	public string City { get; set; }
	public string State { get; set; }
	public int RangeInMiles { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;During the next release, I realized there was a much better way to find out where a user was located: the zip code! Instead of using city and state, using the zip code is a much more efficient way of determining someone’s location. However, clients may be depending on City and State existing to find location in their clients. I’m going to be a jerk and change the contract deleting City and State. In doing this change, I break the current version, 1.4.0. I must increment the major version and reset the minor and patch versions to zero. This results in a new FindUserRequest:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//v2.0.0
public class FindUserRequest {
	public string ZipCode {get; set;}
	public int RangeInMiles {get; set;}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope these examples have illustrated how semantic versioning works and why you would want to adhere to it. The following link is how I learned about semantic versioning and is essentially what I have discussed in this blog, plus more:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://semver.org&quot;&gt;Semantic Versioning&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Sep 2014 00:00:00 -0400</pubDate>
        <link>http://blog.chriszimmerman.net//2014/09/04/Semantic-Versioning.html</link>
        <guid isPermaLink="true">http://blog.chriszimmerman.net//2014/09/04/Semantic-Versioning.html</guid>
      </item>
    
  </channel>
</rss>
