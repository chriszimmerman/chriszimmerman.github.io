<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>House of Black and White</title>
    <description>My blog</description>
    <link>http://blog.chriszimmerman.net</link>
    <atom:link href="http://blog.chriszimmerman.net/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Game Programming C# With XNA</title>
        <description>&lt;h1 id=&quot;game-programming-in-c-with-xna&quot;&gt;Game Programming in C# With XNA&lt;/h1&gt;

&lt;p&gt;Every year for the past few years I’ve been going to PAX East in Boston. Every time, I get inspired to make video games but never actually act on that inspiration. I don’t know if it’s due to A) a lack of original ideas, B) poor artistic skill, C) laziness, or D) all of the above.&lt;/p&gt;

&lt;p&gt;Shortly after my trip to PAX East in March of this year, I started a &lt;a href=&quot;https://class.coursera.org/gameprogramming-002&quot;&gt;Coursera class&lt;/a&gt; about game programming in C#. In this class, I learned about writing C# games using Microsoft’s XNA Framework. The class was aimed at people who have never done programming before, but that was fine. Because I already knew the language features of C# taught in the class, I was able to focus on learning about XNA objects and APIs, as well as game-programming-specific concepts like collision detection and calculating sprite velocities. A few of the games I created were a simple blackjack game and a game where you are a hamburger that shoots french fries at teddy bears while they bounce around and shoot projectiles at you.&lt;/p&gt;

&lt;p&gt;I would like to share what I learned in the course from the XNA and game development perspective. &lt;/p&gt;

&lt;h2 id=&quot;the-xna-framework&quot;&gt;The XNA Framework&lt;/h2&gt;

&lt;p&gt;Microsoft’s XNA &lt;a href=&quot;https://www.microsoft.com/en-us/download/details.aspx?id=20914&quot;&gt;XNA’s Not Acronymed&lt;/a&gt; Framework contains objects that make it relatively easy to create video games. There are objects for handling keyboard and mouse input, getting mouse state, drawing sprites on the screen, and working with sprite velocities, to name a few.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;Mouse&lt;/code&gt; and &lt;code&gt;MouseState&lt;/code&gt; classes allow you to get information about mouse position and button clicks. The &lt;code&gt;Texture2D&lt;/code&gt; class contains information related to a grid of pixels that compose a sprite. The &lt;code&gt;Rectangle&lt;/code&gt; class allows you to access information about the rectangle that represents the sprite, such as length, width, X position, Y, position, upper left corner, and so on. The &lt;code&gt;Vector2&lt;/code&gt; object is a commonly used object that defines a vector used in game physics.&lt;/p&gt;

&lt;p&gt;One thing I dislike about game programming in XNA is that it seems difficult to do great OO programming. In the games I’ve done, I work out of a giant Game class. I have other classes for objects in my games, but it seems like a lot of stuff exists in my &lt;code&gt;Game&lt;/code&gt; class. &lt;code&gt;Game&lt;/code&gt; has its fingers in a lot of pies with having &lt;code&gt;Initialize(), LoadContent(), UnloadContent(), Update(),&lt;/code&gt; and &lt;code&gt;Draw()&lt;/code&gt; methods. I feel like it has too much responsibility. I suppose the game needs to simultaneously update the visuals of the game and the unseen logic, but I feel like that violates the Single Responsibility Principle because I see those two tings as two different responsibilities. &lt;/p&gt;

&lt;h2 id=&quot;fundamental-game-concepts&quot;&gt;Fundamental Game Concepts&lt;/h2&gt;

&lt;h3 id=&quot;the-game-loop&quot;&gt;The Game Loop&lt;/h3&gt;

&lt;p&gt;One of the most fundamental concepts in game programming is the game loop. The game loop constantly runs, checking for user input and updating the environment. For example, the game loop may have code to draw a bullet sprite from a spaceship when the left mouse button is pressed. There may be code to check for when a bullet sprite comes into contact with an alien sprite and play an explosion animation when that occurs. The game loop repeats indefinitely until the game is terminated.&lt;/p&gt;

&lt;p&gt;In pseudocode, the game loop might look something like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;while(gameIsRunning){
	CheckForInputFromUser();
	UpdateInternalGameState();
	UpdateVisualsForPlayer();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The following code sample is from a simplified blackjack game I wrote for an assignment:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;protected override void Update(GameTime gameTime)
{
	MouseState mouseState = Mouse.GetState();
	foreach(var menuButton in menuButtons){
		if(currentState == GameState.WaitingForPlayer || currentState == GameState.DisplayingHandResults){
			menuButton.Update(mouseState);
		}
	}

	switch(currentState){
		case GameState.PlayerHitting:
			PlayerHit();
			break;
		case GameState.WaitingForDealer:
			DealerTurn();
			break;
		case GameState.DealerHitting:
			DealerHit();
			break;
		case GameState.CheckingHandOver:
			CheckHandOver();
			break;
		case GameState.DisplayingHandResults:
			break;
		case GameState.Exiting:
			Exit();
			break;
		default:
			break;
	}

	base.Update(gameTime);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Every time this method executes (which is happening very often), it’s getting information about the mouse which is stored in &lt;code&gt;mouseState&lt;/code&gt;. This includes the X and Y position of the cursor, which button(s) are pressed, etc.&lt;/p&gt;

&lt;p&gt;The blackjack game was designed around a DFA, the states of which are determined by each of the &lt;code&gt;GameState&lt;/code&gt; enum values. If the game is in either of the two states where player input is awaited (&lt;code&gt;GameState.WaitingForPlayer&lt;/code&gt; and &lt;code&gt;GameState.DisplayingHandResults&lt;/code&gt;), it’s going to call the &lt;code&gt;Update&lt;/code&gt; method on each menu button within the game, which will check if any of the buttons (such as the Hit, Stand, or Quit buttons) have been clicked. If the game is not in any of those states, it’s going to go through the switch statement and execute the appropriate code which represents the DFA transition. &lt;/p&gt;

&lt;h3 id=&quot;sprites&quot;&gt;Sprites&lt;/h3&gt;

&lt;p&gt;In 2D game programming, all objects in the world are displayed as sprites. Player characters, enemies the player fights, items the player gets, and other objects and entities in the world are displayed as sprites. Sprites are rectangles of varying sizes that have images placed on them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../../images/4-30-15/explosion.png&quot; alt=&quot;Explosion spritesheet&quot; title=&quot;An explosion spritesheet&quot; /&gt;&lt;/p&gt;

&lt;p&gt;An explosion spritesheet containing the sprites for an animation. Taken from Dr. Tim “Dr. T” Chamillard’s course Beginning Game Programming With C#&lt;/p&gt;

&lt;p&gt;Sprites have a length and width, as well as a position. The position is usually the upper left corner of the sprite, but in some situations, the center point of the sprite is used.&lt;/p&gt;

&lt;h3 id=&quot;collision-detection&quot;&gt;Collision Detection&lt;/h3&gt;

&lt;p&gt;In order for games to be interesting, things need to happen when sprites interact with each other. Collision detection is a term used to describe when the game checks for when sprites intersect each other and what to do when that happens. In Super Mario Bros. if Mario walks into a goomba, he shrinks if he’s big or he dies if he’s small. However, if he jumps on the goomba, he’ll bounce back up and get points.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;../../../../images/4-30-15/collision.png&quot; alt=&quot;Collision detection&quot; title=&quot;Collision detection&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In order for sprites to move on their own, they usually have a velocity. &lt;/p&gt;

&lt;p&gt;TODO: velocity formula&lt;/p&gt;

&lt;h3 id=&quot;removing-unused-resources&quot;&gt;Removing Unused Resources&lt;/h3&gt;

&lt;p&gt;In a game where many objects appear on the screen, something must be done about those objects once they are off screen and will no longer come back on screen. The resources for those objects must be freed or else the game will suffer performance degredation. You may also run out of memory. A simple way of doing this is having an &lt;code&gt;IsActive&lt;/code&gt; or &lt;code&gt;ReadyForDisposal&lt;/code&gt; property on each object and set it to the appropriate value when it’s on or off screen. When the game updates, check for any unused resources lingering around and delete them.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I have talked about some basic 2D game development concepts, as well as talked about some of the XNA Framework’s API. &lt;/p&gt;

&lt;h2 id=&quot;resources&quot;&gt;Resources&lt;/h2&gt;

</description>
        <pubDate>Fri, 01 May 2015 00:00:00 -0400</pubDate>
        <link>http://blog.chriszimmerman.net//2015/05/01/Game-Programming-In-C%23-With-XNA.html</link>
        <guid isPermaLink="true">http://blog.chriszimmerman.net//2015/05/01/Game-Programming-In-C%23-With-XNA.html</guid>
      </item>
    
      <item>
        <title>Retrospectives - A Tool for Team Improvement</title>
        <description>&lt;h1 id=&quot;retrospectives---a-tool-for-team-improvement&quot;&gt;Retrospectives - A Tool for Team Improvement&lt;/h1&gt;

&lt;p&gt;One way of improving a software development team is to regularly hold retrospectives (or ‘retros’ for short). A retrospective is an exercise where a team sets aside a timeboxed amount of time (typically one hour) and looks back on previous times, discussing what went well, what problems could have been avoided, and what could have been done better. Retrospectives are an opportunity to identify and discuss problems, as well as introduce ideas to make the team better. Retrospectives work best when performed in consistent intervals, whether it be every week, every month, or every project.&lt;/p&gt;

&lt;h1 id=&quot;who-should-attend-the-retro&quot;&gt;Who Should Attend the Retro?&lt;/h1&gt;

&lt;p&gt;Typically, when it comes to who attends a retro, smaller groups of people are better. Speaking from personal experience, I have been in several retros involving large groups of people (sometimes as large as the entire office!) and they were DISASTERS. With large groups of people, retros tend to go for much longer than intended. People get tired and lose focus. Conversations that occur in the retro may be of interest to only a small percentage of the people in attendance, leading to people messing around on their phones and not paying attention.&lt;/p&gt;

&lt;p&gt;All of the developers on the team should attend. If the office has tens of developers who work on smaller feature teams, then the developers on those feature teams should attend. Any BAs or QAs who work directly with the developers should be there as well. Managers and bosses should not attend. Their presence may cause people to not be totally honest about how they feel for fear of some type of retribution.&lt;/p&gt;

&lt;p&gt;Ideally, an impartial third party should be the moderator of the retro. &lt;/p&gt;

&lt;p&gt;Retro attendance should not be mandatory. If anyone on the team feels like retrospectives do not bring value, or if the person feels like their time will not be effectively spent in the retro, they should not be forced to come.&lt;/p&gt;

&lt;h1 id=&quot;where-should-the-retro-be-held&quot;&gt;Where Should the Retro Be Held?&lt;/h1&gt;

&lt;p&gt;A room large enough to comfortably hold all of the people attending the retro should be used. There should also be a whiteboard available. The whiteboard will host the data provided by those attending the retro. &lt;/p&gt;

&lt;h1 id=&quot;what-materials-are-required&quot;&gt;What materials are required?&lt;/h1&gt;

&lt;p&gt;Writing utensils, such as markers or pens, are necessary. Index cards and Post-its are great, especially if there are multiple colors. Many retro exercises make use of different colored paper in one form or another. The moderator may want a timer to make sure things don’t run too long. &lt;/p&gt;

&lt;h1 id=&quot;how-long-should-the-retro-be&quot;&gt;How long should the retro be?&lt;/h1&gt;

&lt;p&gt;An hour should be sufficient for retro. How that hour should be allocated will be elaborated on shortly.&lt;/p&gt;

&lt;h1 id=&quot;the-flow-of-a-typical-retrospective&quot;&gt;The Flow of A Typical Retrospective&lt;/h1&gt;

&lt;p&gt;A typical retrospective can be divided into several phases:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Set the stage - 5 minutes&lt;/li&gt;
  &lt;li&gt;Gather data - 10 minutes&lt;/li&gt;
  &lt;li&gt;Generate insights - 20 minutes&lt;/li&gt;
  &lt;li&gt;Decide what to do - 20 minutes&lt;/li&gt;
  &lt;li&gt;Close the retrospective - 5 minutes&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The times I have specified above are not absolute. Feel free to tweak these values to make them fit better for your retros. This is an example of what a retro might be for a small team. Larger teams will obviously require more time. Longer retros should have breaks interspersed.&lt;/p&gt;

&lt;h2 id=&quot;set-the-stage&quot;&gt;Set the stage&lt;/h2&gt;

&lt;p&gt;At the start of the retro, the moderator should thank everyone for coming. The fact that people are attending alone shows that the people in the room have a desire to make a better team. The moderator should explain the purpose of the retro, as well as the schedule, for any people who are unfamiliar with how a retro works.&lt;/p&gt;

&lt;p&gt;Tell the team that the purpose of the retro is not to blame anyone. Read them the &lt;a href=&quot;http://retrospectivewiki.org/index.php?title=The_Prime_Directive&quot;&gt;Prime Directive&lt;/a&gt;:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;“Regardless of what we discover, we understand and truly believe that everyone did the best job they could, given what they knew at the time, their skills and abilities, the resources available, and the situation at hand.”&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Remind them that this is an opportunity to learn and get better, not to blame.&lt;/p&gt;

&lt;p&gt;One exercise that I like to do is an ice-breaker. I pose a simple question that asks for a short answer to everyone in the room. An example would be ‘In a few words, how do you feel the last week went?’ The objective is to get everyone to start talking. Once they start talking by answering a simple question such as this, they will be more prone to engage in conversation throughout the retro. This exercise also gives a reading about how the team feels in general.&lt;/p&gt;

&lt;h2 id=&quot;gather-data&quot;&gt;Gather data&lt;/h2&gt;

&lt;p&gt;The next phase in the retro is where members of the team provide data about the period of time the retro is focused on. There are a number of exercises that can be done to collect data. Some of my gotos are Mad Sad Glad, and 4 L’s (Liked, Lacked, Learned, Longed For). These types of exercises allow the group to generate data from multiple emotions and mindsets, providing a comprehensive picture. It’s best if this data is placed in an area where everyone in the room can look at it, such as on a whiteboard. Different colored index cards or post-its help with associating with different emotions (red for mad, blue for sad, etc.).&lt;/p&gt;

&lt;h2 id=&quot;generate-insights&quot;&gt;Generate insights&lt;/h2&gt;

&lt;p&gt;Once data has been collected, that data can tell a story. One way of generating insights is by mute mapping. Allow 10 or so minutes for everyone to go up to the board and group data that they think are related. After these groups are formed, circle them or box them to signify that they are grouped together. Try to come up with themes for each group. Allow the team members to vote for one or two topics to talk about. Let the team discuss the topic(s) in detail.&lt;/p&gt;

&lt;h2 id=&quot;decide-what-to-do&quot;&gt;Decide what to do&lt;/h2&gt;

&lt;p&gt;At this point, there should have been discussion about the time period the retro is focused on. Team members should have some ideas of things they want to do (or keep doing) to make things better. I recommend steering the team toward making SMART goals. SMART is an acronym.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Specific&lt;/li&gt;
  &lt;li&gt;Measurable&lt;/li&gt;
  &lt;li&gt;Attainable&lt;/li&gt;
  &lt;li&gt;Relevant&lt;/li&gt;
  &lt;li&gt;Timely&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SMART goals are concrete and are easy to see if they have been met or not after a specified period of time. They are also realistic. Have the team come up with two or three smart goals. Place them somewhere everyone can easily see them so that the goals are not easily forgotten about. &lt;/p&gt;

&lt;h2 id=&quot;close-the-retrospective&quot;&gt;Close the retrospective&lt;/h2&gt;

&lt;p&gt;End the retrospective by retro’ing the retro. Ask the team for feedback. What was good? What was bad? What was missing? Tell the team that you welcome any feedback they want to give you, whether it be in public or private.&lt;/p&gt;

&lt;p&gt;Finally, thank everyone for investing their time in coming to the retro.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;Retrospectives are a great way for a software development team to identify problems and look for ways to improve. If you want a great resource on retrospectives, check out &lt;a href=&quot;http://www.amazon.com/Agile-Retrospectives-Making-Teams-Great/dp/0977616649&quot;&gt;Agile Retrospectives - Making Good Teams Great&lt;/a&gt;. Pretty much everything I talked about in this post (and more!) can be found in this book.&lt;/p&gt;

&lt;h1 id=&quot;resources&quot;&gt;Resources&lt;/h1&gt;
&lt;p&gt;&lt;a href=&quot;http://www.amazon.com/Agile-Retrospectives-Making-Teams-Great/dp/0977616649&quot;&gt;Agile Retrospectives - Making Good Teams Great&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://retrospectivewiki.org/index.php?title=The_Prime_Directive&quot;&gt;Prime Directive&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 27 Mar 2015 00:00:00 -0400</pubDate>
        <link>http://blog.chriszimmerman.net//2015/03/27/Retrospectives.html</link>
        <guid isPermaLink="true">http://blog.chriszimmerman.net//2015/03/27/Retrospectives.html</guid>
      </item>
    
      <item>
        <title>Elixir Sampler Flight</title>
        <description>&lt;h1 id=&quot;elixir-sampler-flight&quot;&gt;Elixir Sampler Flight&lt;/h1&gt;

&lt;p&gt;Over the past few months, I’ve been messing around with the Elixir programming language. As far as functional languages go, I have yet to find one that I can stick to. Elixir has been my latest FP adventure. I’d like to give you a sampling of the Elixir language along with some of its features and tools.&lt;/p&gt;

&lt;h1 id=&quot;introduction&quot;&gt;Introduction&lt;/h1&gt;

&lt;p&gt;Elixir is a functional programming language created by José Valim in 2012. Elixir runs on the Erlang Virtual Machine, BEAM. This allows Elixir to take advantage of Erlang’s awesome concurrency capabilities. &lt;/p&gt;

&lt;h1 id=&quot;language-goals&quot;&gt;Language goals&lt;/h1&gt;
&lt;p&gt;When José started creating Elixir, he had three goals in mind: compatibility, productivity, and extensibility.&lt;/p&gt;

&lt;h3 id=&quot;compatibility&quot;&gt;Compatibility&lt;/h3&gt;
&lt;p&gt;In order to take advantage of Erlang’s features such as its concurrency model and libraries, Elixir strives to stay compatible with the underlying Erlang VM. This allows Elixir code to compile to Erlang byte code without a performance degredation. &lt;/p&gt;

&lt;h3 id=&quot;productivity&quot;&gt;Productivity&lt;/h3&gt;

&lt;p&gt;The core of the Elixir language is very small. This allows a lot of the language to be written in itself, making it a homoiconic language. Many of the language’s constructs have been written using macros. This allows developers to easily extend the language using their own macros for their own purposes, making it easy to build things like DSLs.&lt;/p&gt;

&lt;p&gt;Elixir’s syntax is a combination of Ruby and Erlang. This makes sense since José was on the core Rails team. Some people say that Elixir improves upon Erlang’s “weird” syntax. I have virtually no experience in writing Erlang code, so I don’t have an informed opinion on that. Elixir’s syntax reminds me a lot of Ruby. I personally find Ruby very enjoyable for programming. I get things done in Ruby so this is a plus for me. &lt;/p&gt;

&lt;h3 id=&quot;extensibility&quot;&gt;Extensibility&lt;/h3&gt;

&lt;p&gt;In my opinion, the extensibility and productivity goals go hand-in-hand. The core Elixir language is very small. This makes it easy to extend the language for specific needs, which lends to getting things done.   &lt;/p&gt;

&lt;h1 id=&quot;obtaining-elixir&quot;&gt;Obtaining Elixir&lt;/h1&gt;

&lt;p&gt;If you want to mess around with some of the code examples you’ll see in a bit, you can grab the latest release of Elixir from &lt;a href=&quot;http://elixir-lang.org/&quot;&gt;elixir-lang.org&lt;/a&gt;. You can probably also get it from the package manager of your choice. &lt;/p&gt;

&lt;h1 id=&quot;iex&quot;&gt;iex&lt;/h1&gt;

&lt;p&gt;iex (or Interactive Elixir) is Elixir’s repl. If you have Elixir installed, you can start iex by typing the command &lt;code&gt;iex&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;iex has many useful helper functions. The most useful one is probably the help function &lt;code&gt;h&lt;/code&gt; which will give you a list of iex functions along with a description of what they do. You can also pass module names and their functions to see their documentation. For example, &lt;code&gt;h Enum.map&lt;/code&gt; gets you the following output:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/f2a31e4dac4b35773f9b.js?file=help.txt&quot;&gt; &lt;/script&gt;

&lt;p&gt;Another commonly used helper function is for compiling files: &lt;code&gt;c&lt;/code&gt;. You can pass in the name of an elixir script file (.ex or .exs) that you want to compile into BEAM bytecode: &lt;code&gt;c &quot;primes.ex&quot;&lt;/code&gt; &lt;/p&gt;

&lt;h1 id=&quot;lets-take-a-look-at-some-code&quot;&gt;Let’s take a look at some code&lt;/h1&gt;

&lt;p&gt;Elixir has variables:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/f2a31e4dac4b35773f9b.js?file=variables.exs&quot;&gt; &lt;/script&gt;

&lt;p&gt;One thing that’s different about Elixir from most languages is that the = operator is NOT the assignment operator. It’s a match operator. Elixir makes use of pattern matching. Pattern matching is used in things such as conditional clauses and extracting values from complex data types. Here is an example of a case clause.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/f2a31e4dac4b35773f9b.js?file=coolness.exs&quot;&gt; &lt;/script&gt;

&lt;p&gt;An aside: one little weird thing about Elixir is that if you have named functions that aren’t lambdas, they must be contained within a module. Here I have a module named &lt;code&gt;Coolness&lt;/code&gt; that contains the function &lt;code&gt;coolness&lt;/code&gt;. &lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/f2a31e4dac4b35773f9b.js?file=coolness_output.txt&quot;&gt; &lt;/script&gt;

&lt;p&gt;Pattern matching can also be used to extract values from data structures such as tuples. I can use variables on the left side of the match operator to grab values from something on the right side.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/f2a31e4dac4b35773f9b.js?file=pattern_matching_destructuring.txt&quot;&gt; &lt;/script&gt;

&lt;p&gt;In Elixir, functions can be assigned to variables. These are known as lambdas. Lambdas are invoked by placing the . operator after the lambda name and before the parentheses.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/f2a31e4dac4b35773f9b.js?file=lambdas_and_functions.exs&quot;&gt; &lt;/script&gt;

&lt;p&gt;Elixir and Erlang functions are identified by their arity, that is, the number of parameters the function takes. For example, &lt;code&gt;MyMath.square&lt;/code&gt; is identified by &lt;code&gt;MyMath.square/1&lt;/code&gt; and &lt;code&gt;MyMath.add&lt;/code&gt; is identified by &lt;code&gt;MyMath.add/2&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;macros&quot;&gt;Macros&lt;/h1&gt;

&lt;p&gt;Elixir has support for macros. With a small core language, it’s very easy to extend the language for one’s own specific purposes via macros. One benefit of macros is that it’s easy to create a custom domain specific language. &lt;/p&gt;

&lt;p&gt;The following example is the hello world of macros, as well as the extent of my knowledge of writing macros: unless. In Ruby, there is a keyword, &lt;code&gt;unless&lt;/code&gt; that allows one to write conditionals that will execute if the statement in the &lt;code&gt;unless&lt;/code&gt; clause is not true. Basically, think of it as an ‘if not’ statement.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/f2a31e4dac4b35773f9b.js?file=macro_example.exs&quot;&gt; &lt;/script&gt;

&lt;p&gt;What’s going on here? The &lt;code&gt;do_this_if_false&lt;/code&gt; and &lt;code&gt;do_this_if_true&lt;/code&gt; variables hold the code that should be executed for each respective clause. Here’s where things get weird for those not familiar with macros. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;quote&lt;/code&gt; function takes a block of code and stores it as its internal representation in Elixir, a nested tuple, without evaluating it. &lt;code&gt;unquote&lt;/code&gt; is a function that will evaluate the code passed into it. In this example, the condition that’s evaluated to determine which clause to execute will be passed into &lt;code&gt;unquote&lt;/code&gt; since that condition actually needs to be evaluated to find out whether it’s true or false. Since &lt;code&gt;false&lt;/code&gt; and &lt;code&gt;nil&lt;/code&gt; are ‘falsy’ values in Elixir, if the condition evaluates to either, the code in the &lt;code&gt;do_this_if_false&lt;/code&gt; variable gets executed and returned. Otherwise, the code in the &lt;code&gt;do_this_if_true&lt;/code&gt; variable gets executed and returned. &lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/f2a31e4dac4b35773f9b.js?file=macro_output.txt&quot;&gt; &lt;/script&gt;

&lt;h1 id=&quot;concurrency-and-why-you-should-care-about-it&quot;&gt;Concurrency (and why you should care about it)&lt;/h1&gt;

&lt;p&gt;Why care about concurrency? As computer hardware goes down the route of adding more cores to processors, multicore processing is becoming much more beneficial. Single-threaded programming just ain’t gonna cut it anymore.  In the paper &lt;a href=&quot;https://www.cs.utexas.edu/~lin/cs380p/Free_Lunch.pdf&quot;&gt;The Free Lunch Is Over&lt;/a&gt;, this topic is elaborated. In languages like C# and Java, concurrency can be very painful to work with. &lt;/p&gt;

&lt;p&gt;On the other hand, Elixir makes concurrency quite painless. It’s very easy to start up multiple processes to do their own work. Elixir takes advantage of Erlang’s &lt;a href=&quot;http://en.wikipedia.org/wiki/Actor_model&quot;&gt;actor model&lt;/a&gt; implementation. In the actor model, each actor (in this case, an actor is an Elixir process) does its own work that only it knows about. Actors communicate with each other via messages.&lt;/p&gt;

&lt;h1 id=&quot;processes&quot;&gt;Processes&lt;/h1&gt;

&lt;p&gt;As said before, processes are how Elixir implements concurrency. I wrote &lt;a href=&quot;http://blog.chriszimmerman.net/2014/11/02/Elixir-Processes.html&quot;&gt;an earlier post on processes&lt;/a&gt; which I’ll recap. Each process has its own process ID (or pid) which is used in interprocess communication. A process can reference its own PID with the &lt;code&gt;self&lt;/code&gt; keyword. The &lt;code&gt;spawn/1&lt;/code&gt; and &lt;code&gt;spawn/3&lt;/code&gt; functions are used to create processes that will execute the functions passed into them.  &lt;/p&gt;

&lt;p&gt;Let’s see some examples. I’m going to open up iex and type my Elixir code there. First of all, I’m going to start a process that listens for a message and will print “I got something!” when it receives a message.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/f2a31e4dac4b35773f9b.js?file=process1.txt&quot;&gt; &lt;/script&gt;

&lt;p&gt;The spawn function returns the pid of the process that’s created. With this, we know where to send our messages.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/f2a31e4dac4b35773f9b.js?file=process2.txt&quot;&gt; &lt;/script&gt;

&lt;p&gt;I sent a message just containing a string, “what’s up?”, to the address of the process stored in pid. That process received the message and executed its lambda function. &lt;/p&gt;

&lt;p&gt;The &lt;code&gt;receive do&lt;/code&gt; block makes a process block until it receives a message. Upon receiving a message, it will execute the code in the receive do block then terminate. If I try sending a message to that process again, this is the result I get:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/f2a31e4dac4b35773f9b.js?file=process3.txt&quot;&gt; &lt;/script&gt;

&lt;p&gt;Because the process executed the receive do block, it completed execution of the lambda and terminated afterward. In many cases, you want a process to keep listening for messages. If we want to do this, we’re going to have to write our function differently. For starters, we’ll put it in a module. We now have something like this: &lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/f2a31e4dac4b35773f9b.js?file=message1.exs&quot;&gt; &lt;/script&gt;

&lt;p&gt;Next, let’s just tweak it a little bit:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/f2a31e4dac4b35773f9b.js?file=message2.exs&quot;&gt; &lt;/script&gt;

&lt;p&gt;Now the function will recursively call itself after processing a message. This ensures that the process lives on to handle more messages.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/f2a31e4dac4b35773f9b.js?file=process4.txt&quot;&gt; &lt;/script&gt;

&lt;h1 id=&quot;mix&quot;&gt;Mix&lt;/h1&gt;

&lt;p&gt;Mix is a lovely little tool to aid you in managing your projects in Elixir. Mix comes with Elixir. By using the &lt;code&gt;mix new [project name]&lt;/code&gt; command, you can create an empty Elixir project with an organized structure. If I create a new project called foo, it produces the following:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/f2a31e4dac4b35773f9b.js?file=mix.txt&quot;&gt; &lt;/script&gt;

&lt;p&gt;This creates some files that are found in most GitHub projects, such as the &lt;code&gt;README&lt;/code&gt; and &lt;code&gt;gitignore&lt;/code&gt; files. A &lt;code&gt;lib&lt;/code&gt; directory was created. This is where you put your source files. Test files go in the &lt;code&gt;test&lt;/code&gt; directory. Config files are stored in &lt;code&gt;config&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The interesting file here is &lt;code&gt;mix.exs&lt;/code&gt;. In your mix file, you can define dependences that your project has, somewhat like a gemfile in Ruby projects. Running the command &lt;code&gt;mix deps.get&lt;/code&gt; will fetch your dependencies for your project. For a further list of &lt;code&gt;mix&lt;/code&gt; commands, just type &lt;code&gt;mix -h&lt;/code&gt;.&lt;/p&gt;

&lt;h1 id=&quot;testing-framework---exunit&quot;&gt;Testing framework - ExUnit&lt;/h1&gt;

&lt;p&gt;ExUnit is the testing framework included with Elixir. At the time of this writing, it is pretty green still, so there’s not a lot to look at. You can write basic test cases making use of the assert macro, asserting that given expressions are true. &lt;/p&gt;

&lt;p&gt;Let’s say I’m writing a CSV to HTML converter. I want to test that my function that converts a CSV row to an HTML table row is correct. I might have something like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/f2a31e4dac4b35773f9b.js?file=converter_test.exs&quot;&gt; &lt;/script&gt;

&lt;p&gt;I can then run &lt;code&gt;mix test&lt;/code&gt;:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/f2a31e4dac4b35773f9b.js?file=mix_test1.txt&quot;&gt; &lt;/script&gt;

&lt;p&gt;Because I haven’t written the function yet, it’s obviously going to fail. I’ll write the function now.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/f2a31e4dac4b35773f9b.js?file=convert_row.exs&quot;&gt; &lt;/script&gt;

&lt;p&gt;I’m going to split the CSV using a comma delimiter to get each piece of data. I’ll the use a map function that will wrap each piece of cell data in &amp;lt;td&amp;gt; tags. I make use of Elixir’s string interpolation to do this. Enum.join merges the strings together. I then finish up by wrapping that string in &amp;lt;tr&amp;gt; tags. &lt;/p&gt;

&lt;p&gt;Does it work?&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/f2a31e4dac4b35773f9b.js?file=mix_test2.txt&quot;&gt; &lt;/script&gt;

&lt;p&gt;Sweet. It works! Before going on, I would like to digress a little and tell you about Elixir’s pipe operator, &lt;code&gt;|&amp;gt;&lt;/code&gt;. I’m going to write the code differently in order to make my test pass.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/f2a31e4dac4b35773f9b.js?file=convert_row2.exs&quot;&gt; &lt;/script&gt;

&lt;p&gt;Essentially, the pipe operator allows you to take the result of the previous expression and use it as the first argument for the next function that gets called. I split my CSV row up with my comma delimiter as before. With the pipe operator, I can just specify what function I want to apply to my collection with map. Elixir knows I want to use data as the first parameter, the collection to map. That mapped collection then gets passed into Enum.join. That joined string then gets passed into my lambda that wraps &amp;lt;tr&amp;gt; tags around my row. Pretty next, huh?&lt;/p&gt;

&lt;p&gt;A cool thing about ExUnit is that you can specify if you want your unit tests to run in parallel. Sounds like a great tool for keeping a build under 10 minutes. :)&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;

&lt;p&gt;I hope you found reading this post informative and a decent use of your time. Elixir is a neat language that seems to be growing at a fast pace. Like I said, easy concurrency is something that will certainly help software development going forward. This language is good at that. I hope you get out there and fiddle around with the language. :D&lt;/p&gt;

&lt;h1 id=&quot;references&quot;&gt;References&lt;/h1&gt;

&lt;p&gt;On my Elixir journey, I have read &lt;a href=&quot;https://pragprog.com/book/elixir/programming-elixir&quot;&gt;Programming Elixir by Dave Thomas&lt;/a&gt;. If you’re the type to pick up a book on a subject to learn about it, I highly suggest this book. I like the format of the book. He’ll teach you an aspect of Elixir and then give you exercises to complete using the knowledge you just learned. &lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://elixir-lang.org&quot;&gt;Elixir-lang.org&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Elixir_%28programming_language%29&quot;&gt;Elixir Wikipedia article&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://en.wikipedia.org/wiki/Erlang_%28programming_language%29#Concurrency_and_distribution_orientation&quot;&gt;Wikipedia entry on concurrency&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://elixir-lang.org/blog/2013/08/08/elixir-design-goals/&quot;&gt;Elixir language design goals&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 09 Feb 2015 00:00:00 -0500</pubDate>
        <link>http://blog.chriszimmerman.net//2015/02/09/Elixir-Sampler-Flight.html</link>
        <guid isPermaLink="true">http://blog.chriszimmerman.net//2015/02/09/Elixir-Sampler-Flight.html</guid>
      </item>
    
      <item>
        <title>Processes In Elixir</title>
        <description>&lt;h1 id=&quot;processes-in-elixir&quot;&gt;Processes In Elixir&lt;/h1&gt;

&lt;p&gt;Elixir makes use to the Erlang VM to create and manage many processes. Concurrency is easy and inexpensive in Elixir.&lt;/p&gt;

&lt;p&gt;You can make a new process in Elixir by using the spawn function:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;spawn(module, :function_name, [optional_arguments])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The spawn function takes a module and a function from said module, as well as a list of optional arguments to pass to the function. Spawn returns a process identifier, or pid. A pid consists of three numbers which are used to identify a process. If you type &lt;code&gt;self&lt;/code&gt; into iex, you’ll find that iex itself runs as an elixir process.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;iex(1)&amp;gt; self
#PID&amp;lt;0.53.0&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Processes need a way to communicate with each other in order to do anything meaningful. In Elixir, processes achieve this with messages. Processes send messages with data to other processes that receive those messages and handle the data accordingly. &lt;/p&gt;

&lt;p&gt;Here is a simple example:&lt;/p&gt;

&lt;p&gt;proctut.exs&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;defmodule ProcessMessage do
	def send_message msg do
		destination_pid = spawn(ProcessMessage, :get_message, [])
		IO.puts &quot;#{inspect(self)} here.&quot; 
		IO.puts &quot;Sending message to #{inspect(destination_pid)}&quot;
		send destination_pid, {self, msg}
	end	

	def get_message do
		receive do
			{sender, msg} -&amp;gt; 
				IO.puts &quot;#{inspect(self)} here.&quot;
				IO.puts &quot;Received a message from #{inspect(sender)}.&quot; 
				IO.puts &quot;It says \&quot;#{msg}\&quot;.&quot;
		end
	end
end

ProcessMessage.send_message &quot;Why hello there!&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The send_message function takes in a string which will get sent to a process it creates. The created process will run the get_message function, which just waits until it receives a message. It prints the pid of the process that sent the message as well as the message itself. It then terminates.&lt;/p&gt;
</description>
        <pubDate>Sun, 02 Nov 2014 00:00:00 -0400</pubDate>
        <link>http://blog.chriszimmerman.net//2014/11/02/Elixir-Processes.html</link>
        <guid isPermaLink="true">http://blog.chriszimmerman.net//2014/11/02/Elixir-Processes.html</guid>
      </item>
    
      <item>
        <title>Semantic Versioning</title>
        <description>&lt;h1 id=&quot;semantic-versioning&quot;&gt;Semantic Versioning&lt;/h1&gt;

&lt;p&gt;At work, the topic of semantic versioning came up. I decided to do some research on the topic since I had not heard of the term before. &lt;/p&gt;

&lt;h2 id=&quot;what-is-semantic-versioning&quot;&gt;What is semantic versioning?&lt;/h2&gt;

&lt;p&gt;Semantic versioning is a convention for version-naming for your products, whether they be libraries, APIs, etc. Its purpose is to prevent difficulties in releasing new versions of your product. It may be difficult to release a new version of your product if you have to wait for new versions of your product’s dependencies to be released. You may also be reluctant to adopt new versions of packages or libraries since you might not know if a new version will break your existing code. &lt;/p&gt;

&lt;p&gt;In short:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Semantic versioning allows developers to easily reason about when it is and isn’t appropriate to adopt a new version of a dependency.&lt;/strong&gt;&lt;/p&gt;

&lt;h2 id=&quot;format&quot;&gt;Format&lt;/h2&gt;

&lt;p&gt;For semantic versioning, your product must define a public API. The basic format for your API’s version should be as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;major.minor.patch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example, let’s say there is a library called Yarner, a string manipulation library. Its current version is 2.3.5. This means that the major version is 2, the minor version is 3, and the patch version is 5.&lt;/p&gt;

&lt;p&gt;The significance of the numbers is as follows:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-major - incremented when API-breaking changes are made.
		Minor and patch numbers are reset to zero.
-minor - incremented when non-API-breaking changes are made.
		Patch number is reset to zero.
-patch - incremented when non-API-breaking bug fixes are made.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;example&quot;&gt;Example&lt;/h2&gt;

&lt;p&gt;I have a library called AreaCalculator which has a public method, CalculateRectangleArea. It is currently version 1.2.0. It has the following signature: &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;CalculateRectangleArea(int length, int width).  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For whatever dumb reason, CalculateRectangleArea was calculating the area by multiplying length by itself:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return length * length;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This was fixed and now the function correctly calculates the rectangle’s area by returning the rectangle’s length times width:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;return length * width;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fixing this bug doesn’t break the interface of CalculateRectangleArea and it’s not a new feature, so the release containing this fix can be versioned as 1.2.1.&lt;/p&gt;

&lt;h2 id=&quot;another-example&quot;&gt;Another example&lt;/h2&gt;

&lt;p&gt;For my social website Stalk.me, I have provided an API v1.3.2 with which clients can find Users via the public FindPeopleNearby method. FindPeopleNearby takes a FindUserRequest object as its parameter. It has two fields, City and RangeInMiles.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//v1.3.2
public class FindUserRequest {
	public string City { get; set; }
	public int RangeInMiles { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;During development, I decided to utilize state in addition to city for location since towns with the same name can be in different states. I have added a new field, State, that clients can put on their request. This doesn’t break any functionality, so I can increase the minor version, which results in the patch version resetting to zero.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//v1.4.0
public class FindUserRequest {
	public string City { get; set; }
	public string State { get; set; }
	public int RangeInMiles { get; set; }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;During the next release, I realized there was a much better way to find out where a user was located: the zip code! Instead of using city and state, using the zip code is a much more efficient way of determining someone’s location. However, clients may be depending on City and State existing to find location in their clients. I’m going to be a jerk and change the contract deleting City and State. In doing this change, I break the current version, 1.4.0. I must increment the major version and reset the minor and patch versions to zero. This results in a new FindUserRequest:  &lt;/p&gt;

&lt;pre&gt;&lt;code&gt;//v2.0.0
public class FindUserRequest {
	public string ZipCode {get; set;}
	public int RangeInMiles {get; set;}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope these examples have illustrated how semantic versioning works and why you would want to adhere to it. The following link is how I learned about semantic versioning and is essentially what I have discussed in this blog, plus more:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://semver.org&quot;&gt;Semantic Versioning&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Thanks for reading!&lt;/p&gt;
</description>
        <pubDate>Thu, 04 Sep 2014 00:00:00 -0400</pubDate>
        <link>http://blog.chriszimmerman.net//2014/09/04/Semantic-Versioning.html</link>
        <guid isPermaLink="true">http://blog.chriszimmerman.net//2014/09/04/Semantic-Versioning.html</guid>
      </item>
    
  </channel>
</rss>
